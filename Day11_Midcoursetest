--Ex1
select COUNTRY.CONTINENT,floor(avg(CITY.POPULATION))
from CITY,COUNTRY
where CITY.CountryCode=COUNTRY.Code
group by COUNTRY.CONTINENT;
--Ex 2
SELECT 
  ROUND(COUNT(texts.email_id)::DECIMAL
    /COUNT(DISTINCT emails.email_id),2) AS activation_rate
FROM emails
LEFT JOIN texts
  ON emails.email_id = texts.email_id
  AND texts.signup_action = 'Confirmed';  
--Ex3
SELECT 
  age.age_bucket, 
  SUM(activities.time_spent) FILTER (WHERE activities.activity_type = 'send')/
    SUM(activities.time_spent) AS send_perc, 
  SUM(activities.time_spent) FILTER (WHERE activities.activity_type = 'open')/
    SUM(activities.time_spent) AS open_perc
FROM activities
INNER JOIN age_breakdown AS age 
  ON activities.user_id = age.user_id 
WHERE activities.activity_type IN ('send', 'open') 
GROUP BY age.age_bucket;
--Ex 5
SELECT
    E.employee_id,
    E.name,
    COUNT(*) AS reports_count,
    ROUND(AVG(E2.age)) AS average_age
FROM
    Employees E
INNER JOIN Employees E2 ON E.employee_id = E2.reports_to
GROUP BY
    E.employee_id, E.name
HAVING
    COUNT(*) > 0
ORDER BY
    E.employee_id;
--Ex 4
SELECT 
  customers.customer_id, 
  COUNT(DISTINCT products.product_category) AS product_count
FROM customer_contracts AS customers
INNER JOIN products 
  ON customers.product_id = products.product_id
GROUP BY customers.customer_id;
--Ex 6 --- câu này e ko bít sai ở đâu anh Kiên ơi :")
SELECT
    P.product_name,
    SUM(O.unit) AS unit
FROM
    Products P
INNER JOIN Orders O ON P.product_id = O.product_id
WHERE
    O.order_date BETWEEN '2020-02-01' AND '2020-02-29'
GROUP BY P.product_name
HAVING SUM(O.unit) >= 100; 
--Ex 7
SELECT p.page_id
FROM pages p
LEFT JOIN page_likes pl ON p.page_id = pl.page_id
WHERE pl.page_id IS NULL
ORDER BY p.page_id ASC;
----MID-COURSE TEST
--Question 1:
SELECT MIN(DISTINCT replacement_cost) AS min_replacement_cost
FROM film;
--Question 2:
SELECT COUNT(*) AS low_cost_films
FROM film
WHERE replacement_cost BETWEEN 9.99 AND 19.99;
--Question 3:
SELECT f.title, f.length, c.name AS category_name
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
WHERE c.name IN ('Drama', 'Sports')
ORDER BY f.length DESC
LIMIT 1;
--Question 4:
SELECT c.name AS category_name, COUNT(*) AS film_count
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY film_count DESC
LIMIT 1;
--Question 5:
SELECT a.first_name, a.last_name, COUNT(*) AS film_count
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
GROUP BY a.actor_id
ORDER BY film_count DESC
LIMIT 1;
--Question 6:
SELECT COUNT(*) AS unused_addresses
FROM address a
LEFT JOIN customer c ON a.address_id = c.address_id
WHERE c.customer_id IS NULL;
--Question 7:
SELECT ci.city, SUM(p.amount) AS total_revenue
FROM payment p
JOIN customer cu ON p.customer_id = cu.customer_id
JOIN address a ON cu.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
GROUP BY ci.city
ORDER BY total_revenue DESC
LIMIT 1;
--Question 8:
SELECT CONCAT(ci.city, ', ', co.country) AS city_country, SUM(p.amount) AS total_revenue
FROM payment p
JOIN customer cu ON p.customer_id = cu.customer_id
JOIN address a ON cu.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN country co ON ci.country_id = co.country_id
GROUP BY ci.city, co.country
ORDER BY total_revenue DESC
LIMIT 1;


